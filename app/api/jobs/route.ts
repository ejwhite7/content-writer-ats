import { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\nimport { getCurrentUser } from '@/lib/auth'\n\n// Get jobs (public endpoint)\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const page = parseInt(searchParams.get('page') || '1')\n    const limit = parseInt(searchParams.get('limit') || '10')\n    const search = searchParams.get('search')\n    const type = searchParams.get('type')\n    const location = searchParams.get('location')\n    const tenantId = searchParams.get('tenant_id')\n\n    const supabase = createClient()\n    \n    let query = supabase\n      .from('jobs')\n      .select(`\n        *,\n        tenants (name, branding_settings (*))\n      `, { count: 'exact' })\n      .eq('status', 'published')\n      .order('created_at', { ascending: false })\n\n    // Apply filters\n    if (search) {\n      query = query.or(`title.ilike.%${search}%,description.ilike.%${search}%`)\n    }\n    if (type) {\n      query = query.eq('job_type', type)\n    }\n    if (location) {\n      query = query.or(`location.ilike.%${location}%,remote_allowed.eq.true`)\n    }\n    if (tenantId) {\n      query = query.eq('tenant_id', tenantId)\n    }\n\n    // Apply pagination\n    const start = (page - 1) * limit\n    const end = start + limit - 1\n    query = query.range(start, end)\n\n    const { data: jobs, error, count } = await query\n\n    if (error) {\n      return NextResponse.json({ error: error.message }, { status: 500 })\n    }\n\n    return NextResponse.json({\n      jobs: jobs || [],\n      pagination: {\n        page,\n        limit,\n        total: count || 0,\n        pages: Math.ceil((count || 0) / limit)\n      }\n    })\n  } catch (error) {\n    console.error('Error fetching jobs:', error)\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}\n\n// Create job (admin only)\nexport async function POST(request: NextRequest) {\n  try {\n    const user = await getCurrentUser()\n    if (!user || user.role !== 'admin') {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    const jobData = await request.json()\n    const supabase = createClient()\n\n    const { data: job, error } = await supabase\n      .from('jobs')\n      .insert({\n        ...jobData,\n        tenant_id: user.tenant_id,\n        created_by: user.clerk_id\n      })\n      .select()\n      .single()\n\n    if (error) {\n      return NextResponse.json({ error: error.message }, { status: 400 })\n    }\n\n    return NextResponse.json({ job })\n  } catch (error) {\n    console.error('Error creating job:', error)\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}"