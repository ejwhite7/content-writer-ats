import { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\n\n// Webhook to handle Resend email delivery status\nexport async function POST(request: NextRequest) {\n  try {\n    const signature = request.headers.get('resend-signature')\n    const body = await request.text()\n\n    // Verify webhook signature (if configured)\n    if (process.env.RESEND_WEBHOOK_SECRET) {\n      // Implement signature verification here\n      // This is optional but recommended for production\n    }\n\n    const event = JSON.parse(body)\n    console.log('Resend webhook event:', event)\n\n    const supabase = createClient()\n\n    // Update email log status based on event\n    switch (event.type) {\n      case 'email.sent':\n        await supabase\n          .from('email_logs')\n          .update({ \n            status: 'sent',\n            delivered_at: new Date().toISOString()\n          })\n          .eq('resend_id', event.data.email_id)\n        break\n\n      case 'email.delivered':\n        await supabase\n          .from('email_logs')\n          .update({ \n            status: 'delivered',\n            delivered_at: new Date().toISOString()\n          })\n          .eq('resend_id', event.data.email_id)\n        break\n\n      case 'email.delivery_delayed':\n        await supabase\n          .from('email_logs')\n          .update({ \n            status: 'delayed',\n            error_message: event.data.reason\n          })\n          .eq('resend_id', event.data.email_id)\n        break\n\n      case 'email.bounced':\n        await supabase\n          .from('email_logs')\n          .update({ \n            status: 'bounced',\n            error_message: event.data.reason,\n            bounced_at: new Date().toISOString()\n          })\n          .eq('resend_id', event.data.email_id)\n        break\n\n      case 'email.complained':\n        await supabase\n          .from('email_logs')\n          .update({ \n            status: 'complained',\n            complained_at: new Date().toISOString()\n          })\n          .eq('resend_id', event.data.email_id)\n        break\n\n      case 'email.clicked':\n        // Track email clicks\n        await supabase\n          .from('email_events')\n          .insert({\n            email_log_id: event.data.email_id, // This would need to be mapped\n            event_type: 'click',\n            event_data: event.data,\n            created_at: new Date().toISOString()\n          })\n        break\n\n      case 'email.opened':\n        // Track email opens\n        await supabase\n          .from('email_events')\n          .insert({\n            email_log_id: event.data.email_id, // This would need to be mapped\n            event_type: 'open',\n            event_data: event.data,\n            created_at: new Date().toISOString()\n          })\n        break\n\n      default:\n        console.log(`Unhandled Resend webhook event: ${event.type}`)\n    }\n\n    return NextResponse.json({ received: true })\n  } catch (error) {\n    console.error('Error processing Resend webhook:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function GET() {\n  return NextResponse.json({ message: 'Resend webhook endpoint' })\n}"