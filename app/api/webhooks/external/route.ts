import { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\nimport { EmailTriggers } from '@/lib/email/email-triggers'\n\n// Generic webhook endpoint for external integrations\nexport async function POST(request: NextRequest) {\n  try {\n    // Verify webhook signature\n    const signature = request.headers.get('x-webhook-signature')\n    const webhookSecret = request.headers.get('x-webhook-secret')\n    \n    if (!signature || !webhookSecret) {\n      return NextResponse.json({ error: 'Missing webhook authentication' }, { status: 401 })\n    }\n\n    // Verify the webhook is registered\n    const supabase = createClient()\n    const { data: webhook } = await supabase\n      .from('webhooks')\n      .select('*')\n      .eq('secret', webhookSecret)\n      .eq('enabled', true)\n      .single()\n\n    if (!webhook) {\n      return NextResponse.json({ error: 'Invalid webhook' }, { status: 401 })\n    }\n\n    const body = await request.json()\n    const { event, data } = body\n\n    console.log(`Received webhook event: ${event}`, data)\n\n    // Process different webhook events\n    switch (event) {\n      case 'application.created':\n        await handleApplicationCreated(data)\n        break\n      \n      case 'application.updated':\n        await handleApplicationUpdated(data)\n        break\n        \n      case 'assessment.submitted':\n        await handleAssessmentSubmitted(data)\n        break\n        \n      case 'candidate.shortlisted':\n        await handleCandidateShortlisted(data)\n        break\n        \n      case 'candidate.rejected':\n        await handleCandidateRejected(data)\n        break\n        \n      default:\n        console.log(`Unhandled webhook event: ${event}`)\n    }\n\n    // Log webhook receipt\n    await supabase\n      .from('webhook_logs')\n      .insert({\n        webhook_id: webhook.id,\n        event_type: event,\n        payload: body,\n        processed_at: new Date().toISOString(),\n        status: 'processed'\n      })\n\n    return NextResponse.json({ received: true, event })\n  } catch (error) {\n    console.error('Webhook error:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n\nasync function handleApplicationCreated(data: any) {\n  const emailTriggers = new EmailTriggers()\n  await emailTriggers.onApplicationSubmitted(data.application_id)\n}\n\nasync function handleApplicationUpdated(data: any) {\n  // Handle application status changes\n  if (data.stage_changed) {\n    const emailTriggers = new EmailTriggers()\n    \n    switch (data.new_stage) {\n      case 'shortlisted':\n        await emailTriggers.onCandidateShortlisted(data.application_id, data.ai_score)\n        break\n      case 'rejected':\n        await emailTriggers.onCandidateRejected(data.application_id, data.reason)\n        break\n    }\n  }\n}\n\nasync function handleAssessmentSubmitted(data: any) {\n  // Trigger AI scoring\n  try {\n    const response = await fetch(`${process.env.NEXT_PUBLIC_APP_URL}/api/assessments/score`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ assessmentId: data.assessment_id })\n    })\n    \n    if (!response.ok) {\n      console.error('Failed to trigger AI scoring:', await response.text())\n    }\n  } catch (error) {\n    console.error('Error triggering AI scoring:', error)\n  }\n}\n\nasync function handleCandidateShortlisted(data: any) {\n  const emailTriggers = new EmailTriggers()\n  await emailTriggers.onCandidateShortlisted(data.application_id, data.ai_score)\n}\n\nasync function handleCandidateRejected(data: any) {\n  const emailTriggers = new EmailTriggers()\n  await emailTriggers.onCandidateRejected(data.application_id, data.reason)\n}\n\nexport async function GET() {\n  return NextResponse.json({ \n    message: 'External webhook endpoint',\n    events: [\n      'application.created',\n      'application.updated', \n      'assessment.submitted',\n      'candidate.shortlisted',\n      'candidate.rejected'\n    ]\n  })\n}"