import { requireAdmin } from '@/lib/auth'\nimport { createClient } from '@/lib/supabase/server'\nimport { ApplicationsTable } from '@/components/admin/applications-table'\nimport { ApplicationsFilters } from '@/components/admin/applications-filters'\n\ninterface ApplicationsPageProps {\n  searchParams: {\n    stage?: string\n    job?: string\n    search?: string\n    page?: string\n    sort?: string\n  }\n}\n\nexport default async function ApplicationsPage({ searchParams }: ApplicationsPageProps) {\n  const user = await requireAdmin()\n  const supabase = createClient()\n\n  // Build query based on search params\n  let query = supabase\n    .from('applications')\n    .select(`\n      *,\n      jobs (id, title),\n      users (first_name, last_name, email),\n      assessments (ai_total_score, status, created_at)\n    `, { count: 'exact' })\n    .eq('tenant_id', user.tenant_id)\n\n  // Apply filters\n  if (searchParams.stage) {\n    query = query.eq('stage', searchParams.stage)\n  }\n  if (searchParams.job) {\n    query = query.eq('job_id', searchParams.job)\n  }\n  if (searchParams.search) {\n    query = query.or(\n      `first_name.ilike.%${searchParams.search}%,last_name.ilike.%${searchParams.search}%,email.ilike.%${searchParams.search}%`\n    )\n  }\n\n  // Apply sorting\n  const sort = searchParams.sort || 'created_at.desc'\n  const [sortField, sortOrder] = sort.split('.')\n  query = query.order(sortField, { ascending: sortOrder === 'asc' })\n\n  // Apply pagination\n  const page = parseInt(searchParams.page || '1')\n  const limit = 20\n  const start = (page - 1) * limit\n  const end = start + limit - 1\n  query = query.range(start, end)\n\n  const { data: applications, error, count } = await query\n\n  if (error) {\n    console.error('Error fetching applications:', error)\n  }\n\n  // Fetch jobs for filter dropdown\n  const { data: jobs } = await supabase\n    .from('jobs')\n    .select('id, title')\n    .eq('tenant_id', user.tenant_id)\n    .eq('status', 'published')\n    .order('title')\n\n  const totalPages = Math.ceil((count || 0) / limit)\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Applications</h1>\n          <p className=\"text-muted-foreground\">\n            Manage and review candidate applications\n          </p>\n        </div>\n      </div>\n\n      <ApplicationsFilters \n        jobs={jobs || []}\n        currentFilters={searchParams}\n      />\n\n      <ApplicationsTable \n        applications={applications || []}\n        totalCount={count || 0}\n        currentPage={page}\n        totalPages={totalPages}\n        currentSort={sort}\n      />\n    </div>\n  )\n}"