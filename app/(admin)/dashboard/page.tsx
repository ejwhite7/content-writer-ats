import { requireAdmin } from '@/lib/auth'
import { createClient } from '@/lib/supabase/server'
import { DashboardStats } from '@/components/admin/dashboard-stats'
import { RecentApplications } from '@/components/admin/recent-applications'
import { ActiveJobs } from '@/components/admin/active-jobs'\nimport { AIScoring Overview } from '@/components/admin/ai-scoring-overview'\n\nexport default async function AdminDashboardPage() {\n  const user = await requireAdmin()\n  const supabase = createClient()\n\n  // Fetch dashboard data\n  const [statsData, recentApplicationsData, activeJobsData, aiScoringData] = await Promise.all([\n    fetchDashboardStats(supabase, user.tenant_id),\n    fetchRecentApplications(supabase, user.tenant_id),\n    fetchActiveJobs(supabase, user.tenant_id),\n    fetchAIScoringOverview(supabase, user.tenant_id)\n  ])\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Dashboard</h1>\n        <p className=\"text-muted-foreground\">\n          Overview of your hiring pipeline and candidate activity\n        </p>\n      </div>\n\n      <DashboardStats data={statsData} />\n      \n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        <RecentApplications applications={recentApplicationsData} />\n        <ActiveJobs jobs={activeJobsData} />\n      </div>\n      \n      <AIScoring Overview data={aiScoringData} />\n    </div>\n  )\n}\n\nasync function fetchDashboardStats(supabase: any, tenantId: string) {\n  const [applications, shortlisted, hired, avgTimeToHire] = await Promise.all([\n    // Total applications this month\n    supabase\n      .from('applications')\n      .select('id', { count: 'exact' })\n      .eq('tenant_id', tenantId)\n      .gte('created_at', new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString()),\n    \n    // Shortlisted candidates\n    supabase\n      .from('applications')\n      .select('id', { count: 'exact' })\n      .eq('tenant_id', tenantId)\n      .eq('stage', 'shortlisted'),\n    \n    // Hired this month\n    supabase\n      .from('applications')\n      .select('id', { count: 'exact' })\n      .eq('tenant_id', tenantId)\n      .eq('stage', 'hired')\n      .gte('created_at', new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString()),\n    \n    // Average time to hire (simplified)\n    supabase\n      .from('applications')\n      .select('created_at, hired_at')\n      .eq('tenant_id', tenantId)\n      .eq('stage', 'hired')\n      .not('hired_at', 'is', null)\n      .limit(50)\n  ])\n\n  let avgDays = 0\n  if (avgTimeToHire.data && avgTimeToHire.data.length > 0) {\n    const times = avgTimeToHire.data.map(app => {\n      const created = new Date(app.created_at)\n      const hired = new Date(app.hired_at)\n      return (hired.getTime() - created.getTime()) / (1000 * 60 * 60 * 24)\n    })\n    avgDays = times.reduce((a, b) => a + b, 0) / times.length\n  }\n\n  return {\n    totalApplications: applications.count || 0,\n    shortlistedCandidates: shortlisted.count || 0,\n    hiredThisMonth: hired.count || 0,\n    avgTimeToHire: Math.round(avgDays)\n  }\n}\n\nasync function fetchRecentApplications(supabase: any, tenantId: string) {\n  const { data } = await supabase\n    .from('applications')\n    .select(`\n      *,\n      jobs (title),\n      users (first_name, last_name, email),\n      assessments (ai_total_score, status)\n    `)\n    .eq('tenant_id', tenantId)\n    .order('created_at', { ascending: false })\n    .limit(5)\n\n  return data || []\n}\n\nasync function fetchActiveJobs(supabase: any, tenantId: string) {\n  const { data } = await supabase\n    .from('jobs')\n    .select(`\n      *,\n      applications (id)\n    `)\n    .eq('tenant_id', tenantId)\n    .eq('status', 'published')\n    .order('created_at', { ascending: false })\n    .limit(5)\n\n  return data || []\n}\n\nasync function fetchAIScoringOverview(supabase: any, tenantId: string) {\n  const { data } = await supabase\n    .from('assessments')\n    .select('ai_total_score, ai_scores')\n    .eq('tenant_id', tenantId)\n    .eq('status', 'ai_scored')\n    .order('created_at', { ascending: false })\n    .limit(100)\n\n  const scores = data?.filter(a => a.ai_total_score).map(a => a.ai_total_score) || []\n  const avgScore = scores.length > 0 ? scores.reduce((a, b) => a + b, 0) / scores.length : 0\n  \n  const highScores = scores.filter(s => s >= 80).length\n  const mediumScores = scores.filter(s => s >= 60 && s < 80).length\n  const lowScores = scores.filter(s => s < 60).length\n\n  return {\n    totalAssessed: scores.length,\n    averageScore: Math.round(avgScore),\n    distribution: {\n      high: highScores,\n      medium: mediumScores,\n      low: lowScores\n    }\n  }\n}"