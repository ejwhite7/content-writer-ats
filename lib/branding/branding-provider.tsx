'use client'\n\nimport React, { createContext, useContext, useEffect, useState } from 'react'\nimport { createClient } from '@/lib/supabase/client'\n\ninterface BrandingSettings {\n  id: string\n  tenant_id: string\n  company_name: string\n  logo_url?: string\n  primary_color: string\n  secondary_color: string\n  accent_color: string\n  font_family: string\n  custom_domain?: string\n  favicon_url?: string\n  custom_css?: string\n  footer_text?: string\n  contact_email?: string\n  privacy_policy_url?: string\n  terms_of_service_url?: string\n  created_at: string\n  updated_at: string\n}\n\ninterface BrandingContextType {\n  branding: BrandingSettings | null\n  loading: boolean\n  updateBranding: (updates: Partial<BrandingSettings>) => Promise<void>\n  applyBrandingStyles: () => void\n}\n\nconst BrandingContext = createContext<BrandingContextType | undefined>(undefined)\n\ninterface BrandingProviderProps {\n  children: React.ReactNode\n  tenantId?: string\n  initialBranding?: BrandingSettings\n}\n\nexport function BrandingProvider({ \n  children, \n  tenantId, \n  initialBranding \n}: BrandingProviderProps) {\n  const [branding, setBranding] = useState<BrandingSettings | null>(initialBranding || null)\n  const [loading, setLoading] = useState(!initialBranding)\n  const supabase = createClient()\n\n  useEffect(() => {\n    if (!initialBranding && tenantId) {\n      fetchBranding()\n    } else if (initialBranding) {\n      setBranding(initialBranding)\n      applyBrandingStyles(initialBranding)\n    }\n  }, [tenantId, initialBranding])\n\n  const fetchBranding = async () => {\n    if (!tenantId) return\n    \n    setLoading(true)\n    try {\n      const { data, error } = await supabase\n        .from('branding_settings')\n        .select('*')\n        .eq('tenant_id', tenantId)\n        .single()\n\n      if (error && error.code !== 'PGRST116') {\n        console.error('Error fetching branding:', error)\n        return\n      }\n\n      if (data) {\n        setBranding(data)\n        applyBrandingStyles(data)\n      } else {\n        // Create default branding settings\n        const defaultBranding = await createDefaultBranding(tenantId)\n        setBranding(defaultBranding)\n        applyBrandingStyles(defaultBranding)\n      }\n    } catch (error) {\n      console.error('Error in fetchBranding:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const createDefaultBranding = async (tenantId: string): Promise<BrandingSettings> => {\n    const defaultSettings = {\n      tenant_id: tenantId,\n      company_name: 'Your Company',\n      primary_color: '#2563eb',\n      secondary_color: '#64748b',\n      accent_color: '#059669',\n      font_family: 'Inter',\n      footer_text: 'Powered by ATS Platform',\n      contact_email: 'support@yourcompany.com'\n    }\n\n    const { data, error } = await supabase\n      .from('branding_settings')\n      .insert(defaultSettings)\n      .select()\n      .single()\n\n    if (error) {\n      console.error('Error creating default branding:', error)\n      // Return default settings even if save fails\n      return {\n        ...defaultSettings,\n        id: 'temp',\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      } as BrandingSettings\n    }\n\n    return data\n  }\n\n  const updateBranding = async (updates: Partial<BrandingSettings>) => {\n    if (!branding) return\n\n    try {\n      const { data, error } = await supabase\n        .from('branding_settings')\n        .update(updates)\n        .eq('id', branding.id)\n        .select()\n        .single()\n\n      if (error) {\n        console.error('Error updating branding:', error)\n        throw error\n      }\n\n      setBranding(data)\n      applyBrandingStyles(data)\n    } catch (error) {\n      console.error('Error in updateBranding:', error)\n      throw error\n    }\n  }\n\n  const applyBrandingStyles = (brandingData?: BrandingSettings) => {\n    const currentBranding = brandingData || branding\n    if (!currentBranding) return\n\n    const root = document.documentElement\n\n    // Apply CSS custom properties\n    root.style.setProperty('--primary', hexToHsl(currentBranding.primary_color))\n    root.style.setProperty('--secondary', hexToHsl(currentBranding.secondary_color))\n    root.style.setProperty('--accent', hexToHsl(currentBranding.accent_color))\n    \n    // Apply font family\n    if (currentBranding.font_family) {\n      root.style.setProperty('--font-family', currentBranding.font_family)\n      document.body.style.fontFamily = currentBranding.font_family\n    }\n\n    // Apply custom CSS\n    if (currentBranding.custom_css) {\n      let customStyleEl = document.getElementById('custom-branding-styles')\n      if (!customStyleEl) {\n        customStyleEl = document.createElement('style')\n        customStyleEl.id = 'custom-branding-styles'\n        document.head.appendChild(customStyleEl)\n      }\n      customStyleEl.textContent = currentBranding.custom_css\n    }\n\n    // Apply favicon\n    if (currentBranding.favicon_url) {\n      let faviconEl = document.querySelector('link[rel=\"icon\"]') as HTMLLinkElement\n      if (!faviconEl) {\n        faviconEl = document.createElement('link')\n        faviconEl.rel = 'icon'\n        document.head.appendChild(faviconEl)\n      }\n      faviconEl.href = currentBranding.favicon_url\n    }\n\n    // Update document title\n    if (currentBranding.company_name) {\n      const baseTitle = document.title.split(' | ')[0] || document.title\n      document.title = `${baseTitle} | ${currentBranding.company_name}`\n    }\n  }\n\n  const contextValue: BrandingContextType = {\n    branding,\n    loading,\n    updateBranding,\n    applyBrandingStyles: () => applyBrandingStyles()\n  }\n\n  return (\n    <BrandingContext.Provider value={contextValue}>\n      {children}\n    </BrandingContext.Provider>\n  )\n}\n\nexport function useBranding() {\n  const context = useContext(BrandingContext)\n  if (context === undefined) {\n    throw new Error('useBranding must be used within a BrandingProvider')\n  }\n  return context\n}\n\n// Utility function to convert hex to HSL for CSS custom properties\nfunction hexToHsl(hex: string): string {\n  // Remove # if present\n  hex = hex.replace('#', '')\n  \n  // Convert hex to RGB\n  const r = parseInt(hex.substr(0, 2), 16) / 255\n  const g = parseInt(hex.substr(2, 2), 16) / 255\n  const b = parseInt(hex.substr(4, 2), 16) / 255\n\n  const max = Math.max(r, g, b)\n  const min = Math.min(r, g, b)\n  let h, s, l = (max + min) / 2\n\n  if (max === min) {\n    h = s = 0 // achromatic\n  } else {\n    const d = max - min\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min)\n    switch (max) {\n      case r: h = (g - b) / d + (g < b ? 6 : 0); break\n      case g: h = (b - r) / d + 2; break\n      case b: h = (r - g) / d + 4; break\n      default: h = 0\n    }\n    h /= 6\n  }\n\n  return `${Math.round(h * 360)} ${Math.round(s * 100)}% ${Math.round(l * 100)}%`\n}"