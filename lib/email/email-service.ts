import { Resend } from 'resend'\nimport { createClient } from '@/lib/supabase/server'\n\ninterface EmailContext {\n  candidateName?: string\n  jobTitle?: string\n  companyName?: string\n  applicationUrl?: string\n  assessmentUrl?: string\n  messageContent?: string\n  aiScore?: number\n  [key: string]: any\n}\n\ninterface EmailTemplate {\n  id: string\n  name: string\n  subject: string\n  html_content: string\n  text_content: string\n  variables: string[]\n}\n\nexport class EmailService {\n  private resend: Resend\n  private supabase = createClient()\n\n  constructor() {\n    if (!process.env.RESEND_API_KEY) {\n      throw new Error('RESEND_API_KEY is required')\n    }\n    this.resend = new Resend(process.env.RESEND_API_KEY)\n  }\n\n  async sendApplicationConfirmation(candidateEmail: string, context: EmailContext) {\n    return this.sendTemplateEmail(\n      'application_confirmation',\n      candidateEmail,\n      context\n    )\n  }\n\n  async sendAssessmentInvitation(candidateEmail: string, context: EmailContext) {\n    return this.sendTemplateEmail(\n      'assessment_invitation',\n      candidateEmail,\n      context\n    )\n  }\n\n  async sendShortlistNotification(candidateEmail: string, context: EmailContext) {\n    return this.sendTemplateEmail(\n      'shortlist_notification',\n      candidateEmail,\n      context\n    )\n  }\n\n  async sendRejectionNotification(candidateEmail: string, context: EmailContext) {\n    return this.sendTemplateEmail(\n      'rejection_notification',\n      candidateEmail,\n      context\n    )\n  }\n\n  async sendMessageNotification(recipientEmail: string, context: EmailContext) {\n    return this.sendTemplateEmail(\n      'message_notification',\n      recipientEmail,\n      context\n    )\n  }\n\n  async sendAdminApplicationAlert(adminEmail: string, context: EmailContext) {\n    return this.sendTemplateEmail(\n      'admin_application_alert',\n      adminEmail,\n      context\n    )\n  }\n\n  private async sendTemplateEmail(\n    templateName: string,\n    to: string,\n    context: EmailContext,\n    tenantId?: string\n  ) {\n    try {\n      // Get email template\n      const template = await this.getEmailTemplate(templateName, tenantId)\n      if (!template) {\n        console.error(`Email template '${templateName}' not found`)\n        return { error: 'Template not found' }\n      }\n\n      // Get tenant branding for from address and styling\n      const branding = tenantId ? await this.getTenantBranding(tenantId) : null\n      const fromEmail = process.env.RESEND_FROM_EMAIL || 'noreply@atsplatform.com'\n      const fromName = branding?.company_name || 'ATS Platform'\n\n      // Process template with context\n      const processedSubject = this.processTemplate(template.subject, context)\n      const processedHtml = this.processTemplate(template.html_content, context)\n      const processedText = this.processTemplate(template.text_content, context)\n\n      // Apply branding to HTML\n      const brandedHtml = branding \n        ? this.applyBrandingToEmail(processedHtml, branding)\n        : processedHtml\n\n      // Send email\n      const result = await this.resend.emails.send({\n        from: `${fromName} <${fromEmail}>`,\n        to,\n        subject: processedSubject,\n        html: brandedHtml,\n        text: processedText,\n      })\n\n      // Log email sent\n      await this.logEmailSent({\n        template_name: templateName,\n        recipient_email: to,\n        subject: processedSubject,\n        resend_id: result.data?.id,\n        tenant_id: tenantId\n      })\n\n      return result\n    } catch (error) {\n      console.error('Error sending email:', error)\n      return { error: error instanceof Error ? error.message : 'Unknown error' }\n    }\n  }\n\n  private async getEmailTemplate(name: string, tenantId?: string): Promise<EmailTemplate | null> {\n    try {\n      // First try to get tenant-specific template\n      if (tenantId) {\n        const { data: customTemplate } = await this.supabase\n          .from('email_templates')\n          .select('*')\n          .eq('name', name)\n          .eq('tenant_id', tenantId)\n          .single()\n\n        if (customTemplate) return customTemplate\n      }\n\n      // Fall back to default template\n      const { data: defaultTemplate } = await this.supabase\n        .from('email_templates')\n        .select('*')\n        .eq('name', name)\n        .is('tenant_id', null)\n        .single()\n\n      return defaultTemplate || this.getDefaultTemplate(name)\n    } catch (error) {\n      console.error('Error fetching email template:', error)\n      return this.getDefaultTemplate(name)\n    }\n  }\n\n  private getDefaultTemplate(name: string): EmailTemplate | null {\n    const templates: Record<string, EmailTemplate> = {\n      application_confirmation: {\n        id: 'default-app-confirmation',\n        name: 'application_confirmation',\n        subject: 'Application Received - {{jobTitle}}',\n        html_content: `\n          <h2>Thank you for your application!</h2>\n          <p>Hi {{candidateName}},</p>\n          <p>We've received your application for the <strong>{{jobTitle}}</strong> position at {{companyName}}.</p>\n          <p>What happens next:</p>\n          <ul>\n            <li>Our team will review your application</li>\n            <li>If selected, you'll receive an assessment invitation</li>\n            <li>We'll keep you updated throughout the process</li>\n          </ul>\n          <p>You can track your application status at: <a href=\"{{applicationUrl}}\">View Application</a></p>\n          <p>Thank you for your interest in joining our team!</p>\n        `,\n        text_content: 'Thank you for your application for {{jobTitle}} at {{companyName}}. We\\'ll review it and get back to you soon.',\n        variables: ['candidateName', 'jobTitle', 'companyName', 'applicationUrl']\n      },\n      assessment_invitation: {\n        id: 'default-assessment',\n        name: 'assessment_invitation',\n        subject: 'Complete Your Writing Assessment - {{jobTitle}}',\n        html_content: `\n          <h2>Next Step: Writing Assessment</h2>\n          <p>Hi {{candidateName}},</p>\n          <p>Great news! We'd like to move forward with your application for <strong>{{jobTitle}}</strong>.</p>\n          <p>The next step is to complete a writing assessment. This will help us evaluate your writing skills and ensure you're a good fit for the role.</p>\n          <p><a href=\"{{assessmentUrl}}\" style=\"background-color: #2563eb; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px;\">Start Assessment</a></p>\n          <p>The assessment should take about 30-45 minutes to complete. Please submit it within 3 days.</p>\n          <p>Good luck!</p>\n        `,\n        text_content: 'Please complete your writing assessment for {{jobTitle}}. Visit: {{assessmentUrl}}',\n        variables: ['candidateName', 'jobTitle', 'assessmentUrl']\n      },\n      shortlist_notification: {\n        id: 'default-shortlist',\n        name: 'shortlist_notification',\n        subject: 'Congratulations! You\\'ve been shortlisted - {{jobTitle}}',\n        html_content: `\n          <h2>Congratulations! You've been shortlisted</h2>\n          <p>Hi {{candidateName}},</p>\n          <p>We're excited to inform you that you've been shortlisted for the <strong>{{jobTitle}}</strong> position!</p>\n          <p>Your assessment scored {{aiScore}}/100, which puts you in our top candidates.</p>\n          <p>Our team will be in touch soon to discuss the next steps in the hiring process.</p>\n          <p>Thank you for your excellent application and assessment.</p>\n        `,\n        text_content: 'Congratulations! You\\'ve been shortlisted for {{jobTitle}}. Your assessment scored {{aiScore}}/100.',\n        variables: ['candidateName', 'jobTitle', 'aiScore']\n      },\n      message_notification: {\n        id: 'default-message',\n        name: 'message_notification',\n        subject: 'New message about your application - {{jobTitle}}',\n        html_content: `\n          <h2>New Message</h2>\n          <p>Hi {{candidateName}},</p>\n          <p>You have a new message regarding your application for <strong>{{jobTitle}}</strong>:</p>\n          <blockquote style=\"border-left: 4px solid #2563eb; padding-left: 16px; margin: 16px 0;\">\n            {{messageContent}}\n          </blockquote>\n          <p><a href=\"{{applicationUrl}}\">Reply to this message</a></p>\n        `,\n        text_content: 'New message about {{jobTitle}}: {{messageContent}}. Reply at: {{applicationUrl}}',\n        variables: ['candidateName', 'jobTitle', 'messageContent', 'applicationUrl']\n      }\n    }\n\n    return templates[name] || null\n  }\n\n  private async getTenantBranding(tenantId: string) {\n    try {\n      const { data } = await this.supabase\n        .from('branding_settings')\n        .select('*')\n        .eq('tenant_id', tenantId)\n        .single()\n      \n      return data\n    } catch (error) {\n      console.error('Error fetching tenant branding:', error)\n      return null\n    }\n  }\n\n  private processTemplate(template: string, context: EmailContext): string {\n    let processed = template\n    \n    for (const [key, value] of Object.entries(context)) {\n      const placeholder = `{{${key}}}`\n      processed = processed.replace(new RegExp(placeholder, 'g'), String(value || ''))\n    }\n    \n    return processed\n  }\n\n  private applyBrandingToEmail(html: string, branding: any): string {\n    // Apply basic branding to email template\n    const brandedHtml = `\n      <div style=\"font-family: ${branding.font_family || 'Arial, sans-serif'}; max-width: 600px; margin: 0 auto;\">\n        ${branding.logo_url ? `<img src=\"${branding.logo_url}\" alt=\"${branding.company_name}\" style=\"max-height: 60px; margin-bottom: 20px;\">` : ''}\n        <div style=\"color: #333; line-height: 1.6;\">\n          ${html}\n        </div>\n        <div style=\"border-top: 1px solid #eee; padding-top: 20px; margin-top: 30px; color: #666; font-size: 12px;\">\n          ${branding.footer_text || ''}\n          ${branding.contact_email ? `<br>Contact: ${branding.contact_email}` : ''}\n        </div>\n      </div>\n    `\n    \n    return brandedHtml\n  }\n\n  private async logEmailSent(data: {\n    template_name: string\n    recipient_email: string\n    subject: string\n    resend_id?: string\n    tenant_id?: string\n  }) {\n    try {\n      await this.supabase\n        .from('email_logs')\n        .insert({\n          ...data,\n          sent_at: new Date().toISOString(),\n          status: 'sent'\n        })\n    } catch (error) {\n      console.error('Error logging email:', error)\n    }\n  }\n\n  async createEmailTemplate(template: Omit<EmailTemplate, 'id'> & { tenant_id?: string }) {\n    try {\n      const { data, error } = await this.supabase\n        .from('email_templates')\n        .insert(template)\n        .select()\n        .single()\n\n      if (error) throw error\n      return data\n    } catch (error) {\n      console.error('Error creating email template:', error)\n      throw error\n    }\n  }\n\n  async updateEmailTemplate(id: string, updates: Partial<EmailTemplate>) {\n    try {\n      const { data, error } = await this.supabase\n        .from('email_templates')\n        .update(updates)\n        .eq('id', id)\n        .select()\n        .single()\n\n      if (error) throw error\n      return data\n    } catch (error) {\n      console.error('Error updating email template:', error)\n      throw error\n    }\n  }\n\n  async getEmailTemplates(tenantId?: string) {\n    try {\n      let query = this.supabase\n        .from('email_templates')\n        .select('*')\n        .order('name')\n      \n      if (tenantId) {\n        query = query.or(`tenant_id.eq.${tenantId},tenant_id.is.null`)\n      } else {\n        query = query.is('tenant_id', null)\n      }\n\n      const { data, error } = await query\n      if (error) throw error\n      \n      return data\n    } catch (error) {\n      console.error('Error fetching email templates:', error)\n      throw error\n    }\n  }\n}"