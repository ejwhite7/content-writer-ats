'use client'\n\nimport { useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport * as z from 'zod'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Textarea } from '@/components/ui/textarea'\nimport { Label } from '@/components/ui/label'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { FileUpload } from '@/components/ui/file-upload'\nimport { useToast } from '@/components/ui/use-toast'\nimport { useBranding } from '@/lib/branding/branding-provider'\nimport { createClient } from '@/lib/supabase/client'\nimport { Loader2, Save, Eye, RefreshCw } from 'lucide-react'\n\nconst brandingSchema = z.object({\n  company_name: z.string().min(1, 'Company name is required'),\n  primary_color: z.string().regex(/^#[0-9A-F]{6}$/i, 'Must be a valid hex color'),\n  secondary_color: z.string().regex(/^#[0-9A-F]{6}$/i, 'Must be a valid hex color'),\n  accent_color: z.string().regex(/^#[0-9A-F]{6}$/i, 'Must be a valid hex color'),\n  font_family: z.string().min(1, 'Font family is required'),\n  custom_domain: z.string().optional(),\n  footer_text: z.string().optional(),\n  contact_email: z.string().email().optional().or(z.literal('')),\n  privacy_policy_url: z.string().url().optional().or(z.literal('')),\n  terms_of_service_url: z.string().url().optional().or(z.literal('')),\n  custom_css: z.string().optional()\n})\n\ntype BrandingFormData = z.infer<typeof brandingSchema>\n\ninterface BrandingSettingsProps {\n  initialBranding?: any\n  tenant?: any\n}\n\nconst FONT_OPTIONS = [\n  { value: 'Inter', label: 'Inter' },\n  { value: 'Roboto', label: 'Roboto' },\n  { value: 'Open Sans', label: 'Open Sans' },\n  { value: 'Lato', label: 'Lato' },\n  { value: 'Montserrat', label: 'Montserrat' },\n  { value: 'Poppins', label: 'Poppins' },\n  { value: 'Source Sans Pro', label: 'Source Sans Pro' },\n]\n\nexport function BrandingSettings({ initialBranding, tenant }: BrandingSettingsProps) {\n  const { branding, updateBranding, applyBrandingStyles } = useBranding()\n  const { toast } = useToast()\n  const [saving, setSaving] = useState(false)\n  const [logoFile, setLogoFile] = useState<File | null>(null)\n  const [faviconFile, setFaviconFile] = useState<File | null>(null)\n  const supabase = createClient()\n\n  const form = useForm<BrandingFormData>({\n    resolver: zodResolver(brandingSchema),\n    defaultValues: {\n      company_name: initialBranding?.company_name || tenant?.name || '',\n      primary_color: initialBranding?.primary_color || '#2563eb',\n      secondary_color: initialBranding?.secondary_color || '#64748b',\n      accent_color: initialBranding?.accent_color || '#059669',\n      font_family: initialBranding?.font_family || 'Inter',\n      custom_domain: initialBranding?.custom_domain || '',\n      footer_text: initialBranding?.footer_text || 'Powered by ATS Platform',\n      contact_email: initialBranding?.contact_email || '',\n      privacy_policy_url: initialBranding?.privacy_policy_url || '',\n      terms_of_service_url: initialBranding?.terms_of_service_url || '',\n      custom_css: initialBranding?.custom_css || ''\n    }\n  })\n\n  const uploadFile = async (file: File, bucket: string, path: string): Promise<string> => {\n    const { data, error } = await supabase.storage\n      .from(bucket)\n      .upload(path, file, { upsert: true })\n\n    if (error) throw error\n\n    const { data: { publicUrl } } = supabase.storage\n      .from(bucket)\n      .getPublicUrl(path)\n\n    return publicUrl\n  }\n\n  const onSubmit = async (data: BrandingFormData) => {\n    setSaving(true)\n    \n    try {\n      let logoUrl = initialBranding?.logo_url\n      let faviconUrl = initialBranding?.favicon_url\n\n      // Upload logo if provided\n      if (logoFile) {\n        logoUrl = await uploadFile(\n          logoFile, \n          'branding', \n          `${tenant?.id}/logo-${Date.now()}.${logoFile.name.split('.').pop()}`\n        )\n      }\n\n      // Upload favicon if provided\n      if (faviconFile) {\n        faviconUrl = await uploadFile(\n          faviconFile, \n          'branding', \n          `${tenant?.id}/favicon-${Date.now()}.${faviconFile.name.split('.').pop()}`\n        )\n      }\n\n      const updates = {\n        ...data,\n        logo_url: logoUrl,\n        favicon_url: faviconUrl,\n      }\n\n      await updateBranding(updates)\n\n      toast({\n        title: 'Branding Updated',\n        description: 'Your branding settings have been saved successfully.'\n      })\n    } catch (error) {\n      console.error('Error saving branding:', error)\n      toast({\n        title: 'Error',\n        description: 'Failed to save branding settings. Please try again.',\n        variant: 'destructive'\n      })\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  const previewChanges = () => {\n    const formData = form.getValues()\n    // Temporarily apply styles for preview\n    const tempBranding = {\n      ...branding,\n      ...formData\n    }\n    \n    // Apply styles temporarily\n    const root = document.documentElement\n    root.style.setProperty('--primary', hexToHsl(formData.primary_color))\n    root.style.setProperty('--secondary', hexToHsl(formData.secondary_color))\n    root.style.setProperty('--accent', hexToHsl(formData.accent_color))\n    document.body.style.fontFamily = formData.font_family\n\n    toast({\n      title: 'Preview Applied',\n      description: 'Preview changes applied. Save to make them permanent.'\n    })\n  }\n\n  const resetPreview = () => {\n    applyBrandingStyles()\n    toast({\n      title: 'Preview Reset',\n      description: 'Preview reset to saved settings.'\n    })\n  }\n\n  return (\n    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n      <Tabs defaultValue=\"general\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"general\">General</TabsTrigger>\n          <TabsTrigger value=\"colors\">Colors & Fonts</TabsTrigger>\n          <TabsTrigger value=\"assets\">Assets</TabsTrigger>\n          <TabsTrigger value=\"advanced\">Advanced</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"general\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>General Settings</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"company_name\">Company Name</Label>\n                <Input\n                  id=\"company_name\"\n                  {...form.register('company_name')}\n                  error={form.formState.errors.company_name?.message}\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"contact_email\">Contact Email</Label>\n                <Input\n                  id=\"contact_email\"\n                  type=\"email\"\n                  {...form.register('contact_email')}\n                  error={form.formState.errors.contact_email?.message}\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"custom_domain\">Custom Domain</Label>\n                <Input\n                  id=\"custom_domain\"\n                  placeholder=\"hire.yourcompany.com\"\n                  {...form.register('custom_domain')}\n                  error={form.formState.errors.custom_domain?.message}\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"footer_text\">Footer Text</Label>\n                <Textarea\n                  id=\"footer_text\"\n                  placeholder=\"Powered by ATS Platform\"\n                  {...form.register('footer_text')}\n                />\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"colors\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Colors & Typography</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <Label htmlFor=\"primary_color\">Primary Color</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <Input\n                      id=\"primary_color\"\n                      type=\"color\"\n                      className=\"w-16 h-10 p-1 border\"\n                      {...form.register('primary_color')}\n                    />\n                    <Input\n                      value={form.watch('primary_color')}\n                      onChange={(e) => form.setValue('primary_color', e.target.value)}\n                      placeholder=\"#2563eb\"\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"secondary_color\">Secondary Color</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <Input\n                      id=\"secondary_color\"\n                      type=\"color\"\n                      className=\"w-16 h-10 p-1 border\"\n                      {...form.register('secondary_color')}\n                    />\n                    <Input\n                      value={form.watch('secondary_color')}\n                      onChange={(e) => form.setValue('secondary_color', e.target.value)}\n                      placeholder=\"#64748b\"\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"accent_color\">Accent Color</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <Input\n                      id=\"accent_color\"\n                      type=\"color\"\n                      className=\"w-16 h-10 p-1 border\"\n                      {...form.register('accent_color')}\n                    />\n                    <Input\n                      value={form.watch('accent_color')}\n                      onChange={(e) => form.setValue('accent_color', e.target.value)}\n                      placeholder=\"#059669\"\n                    />\n                  </div>\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"font_family\">Font Family</Label>\n                <select\n                  {...form.register('font_family')}\n                  className=\"w-full px-3 py-2 border border-input bg-background rounded-md\"\n                >\n                  {FONT_OPTIONS.map(font => (\n                    <option key={font.value} value={font.value}>\n                      {font.label}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"assets\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Brand Assets</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label>Company Logo</Label>\n                <FileUpload\n                  accept=\"image/*\"\n                  onFileSelect={(file) => setLogoFile(file as File)}\n                  maxSize={2 * 1024 * 1024} // 2MB\n                  description=\"Upload your company logo (PNG, JPG, SVG, max 2MB)\"\n                />\n                {initialBranding?.logo_url && !logoFile && (\n                  <div className=\"mt-2\">\n                    <img \n                      src={initialBranding.logo_url} \n                      alt=\"Current logo\" \n                      className=\"h-16 object-contain\"\n                    />\n                  </div>\n                )}\n              </div>\n              \n              <div>\n                <Label>Favicon</Label>\n                <FileUpload\n                  accept=\"image/*\"\n                  onFileSelect={(file) => setFaviconFile(file as File)}\n                  maxSize={1 * 1024 * 1024} // 1MB\n                  description=\"Upload favicon (PNG, ICO, max 1MB, recommended 32x32px)\"\n                />\n                {initialBranding?.favicon_url && !faviconFile && (\n                  <div className=\"mt-2\">\n                    <img \n                      src={initialBranding.favicon_url} \n                      alt=\"Current favicon\" \n                      className=\"h-8 w-8 object-contain\"\n                    />\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"advanced\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Advanced Settings</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"privacy_policy_url\">Privacy Policy URL</Label>\n                <Input\n                  id=\"privacy_policy_url\"\n                  type=\"url\"\n                  placeholder=\"https://yourcompany.com/privacy\"\n                  {...form.register('privacy_policy_url')}\n                  error={form.formState.errors.privacy_policy_url?.message}\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"terms_of_service_url\">Terms of Service URL</Label>\n                <Input\n                  id=\"terms_of_service_url\"\n                  type=\"url\"\n                  placeholder=\"https://yourcompany.com/terms\"\n                  {...form.register('terms_of_service_url')}\n                  error={form.formState.errors.terms_of_service_url?.message}\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"custom_css\">Custom CSS</Label>\n                <Textarea\n                  id=\"custom_css\"\n                  rows={8}\n                  placeholder=\"/* Add your custom CSS here */\"\n                  {...form.register('custom_css')}\n                  className=\"font-mono text-sm\"\n                />\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Advanced users can add custom CSS to further customize the appearance\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={previewChanges}\n          >\n            <Eye className=\"h-4 w-4 mr-2\" />\n            Preview Changes\n          </Button>\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={resetPreview}\n          >\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Reset Preview\n          </Button>\n        </div>\n        \n        <Button type=\"submit\" disabled={saving}>\n          {saving && <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />}\n          <Save className=\"h-4 w-4 mr-2\" />\n          Save Changes\n        </Button>\n      </div>\n    </form>\n  )\n}\n\n// Utility function to convert hex to HSL\nfunction hexToHsl(hex: string): string {\n  hex = hex.replace('#', '')\n  const r = parseInt(hex.substr(0, 2), 16) / 255\n  const g = parseInt(hex.substr(2, 2), 16) / 255\n  const b = parseInt(hex.substr(4, 2), 16) / 255\n\n  const max = Math.max(r, g, b)\n  const min = Math.min(r, g, b)\n  let h, s, l = (max + min) / 2\n\n  if (max === min) {\n    h = s = 0\n  } else {\n    const d = max - min\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min)\n    switch (max) {\n      case r: h = (g - b) / d + (g < b ? 6 : 0); break\n      case g: h = (b - r) / d + 2; break\n      case b: h = (r - g) / d + 4; break\n      default: h = 0\n    }\n    h /= 6\n  }\n\n  return `${Math.round(h * 360)} ${Math.round(s * 100)}% ${Math.round(l * 100)}%`\n}"