'use client'\n\nimport { useState } from 'react'\nimport Link from 'next/link'\nimport { formatDistanceToNow } from 'date-fns'\nimport { Badge } from '@/components/ui/badge'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport { Eye, MoreHorizontal, User, ArrowUpDown, ChevronLeft, ChevronRight } from 'lucide-react'\n\ninterface Application {\n  id: string\n  first_name: string\n  last_name: string\n  email: string\n  stage: string\n  status: string\n  created_at: string\n  jobs: { id: string; title: string }\n  users: { first_name: string; last_name: string; email: string }\n  assessments: Array<{ ai_total_score: number; status: string; created_at: string }>\n}\n\ninterface ApplicationsTableProps {\n  applications: Application[]\n  totalCount: number\n  currentPage: number\n  totalPages: number\n  currentSort: string\n}\n\nconst STAGE_COLORS = {\n  applied: 'bg-blue-100 text-blue-800',\n  assessment_submitted: 'bg-yellow-100 text-yellow-800',\n  ai_reviewed: 'bg-purple-100 text-purple-800',\n  shortlisted: 'bg-green-100 text-green-800',\n  manual_review: 'bg-orange-100 text-orange-800',\n  paid_assignment: 'bg-indigo-100 text-indigo-800',\n  hired: 'bg-emerald-100 text-emerald-800',\n  rejected: 'bg-red-100 text-red-800',\n}\n\nconst STAGE_LABELS = {\n  applied: 'Applied',\n  assessment_submitted: 'Assessment Submitted',\n  ai_reviewed: 'AI Reviewed',\n  shortlisted: 'Shortlisted',\n  manual_review: 'Manual Review',\n  paid_assignment: 'Paid Assignment',\n  hired: 'Hired',\n  rejected: 'Rejected',\n}\n\nexport function ApplicationsTable({\n  applications,\n  totalCount,\n  currentPage,\n  totalPages,\n  currentSort\n}: ApplicationsTableProps) {\n  const [selectedApplications, setSelectedApplications] = useState<string[]>([])\n\n  const updateSort = (field: string) => {\n    const [currentField, currentOrder] = currentSort.split('.')\n    const newOrder = currentField === field && currentOrder === 'asc' ? 'desc' : 'asc'\n    const url = new URL(window.location.href)\n    url.searchParams.set('sort', `${field}.${newOrder}`)\n    window.location.href = url.toString()\n  }\n\n  const updatePage = (page: number) => {\n    const url = new URL(window.location.href)\n    url.searchParams.set('page', page.toString())\n    window.location.href = url.toString()\n  }\n\n  const getAIScore = (application: Application) => {\n    const assessment = application.assessments?.[0]\n    if (!assessment || !assessment.ai_total_score) return null\n    return assessment.ai_total_score\n  }\n\n  const toggleSelection = (applicationId: string) => {\n    setSelectedApplications(prev => \n      prev.includes(applicationId)\n        ? prev.filter(id => id !== applicationId)\n        : [...prev, applicationId]\n    )\n  }\n\n  const toggleAllSelection = () => {\n    setSelectedApplications(prev => \n      prev.length === applications.length \n        ? []\n        : applications.map(app => app.id)\n    )\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Applications ({totalCount})</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"rounded-md border\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead className=\"w-12\">\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedApplications.length === applications.length && applications.length > 0}\n                    onChange={toggleAllSelection}\n                    className=\"rounded border-gray-300\"\n                  />\n                </TableHead>\n                <TableHead>\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() => updateSort('first_name')}\n                    className=\"h-auto p-0 font-medium hover:bg-transparent\"\n                  >\n                    Candidate\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                  </Button>\n                </TableHead>\n                <TableHead>\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() => updateSort('job_id')}\n                    className=\"h-auto p-0 font-medium hover:bg-transparent\"\n                  >\n                    Position\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                  </Button>\n                </TableHead>\n                <TableHead>\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() => updateSort('stage')}\n                    className=\"h-auto p-0 font-medium hover:bg-transparent\"\n                  >\n                    Stage\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                  </Button>\n                </TableHead>\n                <TableHead>AI Score</TableHead>\n                <TableHead>\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() => updateSort('created_at')}\n                    className=\"h-auto p-0 font-medium hover:bg-transparent\"\n                  >\n                    Applied\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                  </Button>\n                </TableHead>\n                <TableHead className=\"w-12\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {applications.map((application) => {\n                const aiScore = getAIScore(application)\n                return (\n                  <TableRow \n                    key={application.id}\n                    className={selectedApplications.includes(application.id) ? 'bg-muted/50' : ''}\n                  >\n                    <TableCell>\n                      <input\n                        type=\"checkbox\"\n                        checked={selectedApplications.includes(application.id)}\n                        onChange={() => toggleSelection(application.id)}\n                        className=\"rounded border-gray-300\"\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"h-8 w-8 rounded-full bg-muted flex items-center justify-center\">\n                          <User className=\"h-4 w-4\" />\n                        </div>\n                        <div>\n                          <div className=\"font-medium\">\n                            {application.first_name} {application.last_name}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">\n                            {application.email}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"font-medium\">{application.jobs.title}</div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={STAGE_COLORS[application.stage as keyof typeof STAGE_COLORS] || 'bg-gray-100 text-gray-800'}>\n                        {STAGE_LABELS[application.stage as keyof typeof STAGE_LABELS] || application.stage}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      {aiScore ? (\n                        <div className=\"flex items-center space-x-2\">\n                          <div className={`w-2 h-2 rounded-full ${\n                            aiScore >= 80 ? 'bg-green-500' :\n                            aiScore >= 60 ? 'bg-yellow-500' : 'bg-red-500'\n                          }`} />\n                          <span className=\"font-medium\">{aiScore}</span>\n                        </div>\n                      ) : (\n                        <span className=\"text-muted-foreground\">-</span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm text-muted-foreground\">\n                        {formatDistanceToNow(new Date(application.created_at), { addSuffix: true })}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuItem asChild>\n                            <Link href={`/admin/applications/${application.id}`}>\n                              <Eye className=\"h-4 w-4 mr-2\" />\n                              View Details\n                            </Link>\n                          </DropdownMenuItem>\n                          <DropdownMenuItem>\n                            Move to Shortlist\n                          </DropdownMenuItem>\n                          <DropdownMenuItem>\n                            Send Message\n                          </DropdownMenuItem>\n                          <DropdownMenuItem className=\"text-red-600\">\n                            Reject\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </TableRow>\n                )\n              })}\n            </TableBody>\n          </Table>\n        </div>\n\n        {/* Pagination */}\n        {totalPages > 1 && (\n          <div className=\"flex items-center justify-between space-x-2 py-4\">\n            <div className=\"text-sm text-muted-foreground\">\n              Showing {(currentPage - 1) * 20 + 1} to {Math.min(currentPage * 20, totalCount)} of {totalCount} applications\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => updatePage(currentPage - 1)}\n                disabled={currentPage === 1}\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n                Previous\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => updatePage(currentPage + 1)}\n                disabled={currentPage === totalPages}\n              >\n                Next\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  )\n}"